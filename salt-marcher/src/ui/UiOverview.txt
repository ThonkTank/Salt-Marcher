# UI Overview

The UI layer provides small, reusable dialogs that power multiple feature apps. Every component builds on Obsidian primitives and encapsulates UX flows so feature modules only supply callback logic.

## Modals

| Module | Responsibility | Notes |
| --- | --- | --- |
| `modals.ts` | Contains generic modals with no domain logic: <br>• `NameInputModal` asks for a map name, focuses the input automatically, and accepts **Enter** as a shortcut. <br>• `MapSelectModal` extends `FuzzySuggestModal` to pick maps (`TFile`) based on the file name and invokes the constructor callback with the selection. | Used by the cartographer editor and gallery to create or open maps. |
| `confirm-delete.ts` | `ConfirmDeleteModal` asks the user to re-enter the map name before deletion. The delete button uses warning styling with an icon; success and failure states surface a `Notice`. | Primary safety dialog for map deletion flows. |

## Shared map flows

| Module | Responsibility | Notes |
| --- | --- | --- |
| `map-workflows.ts` | Groups recurring UI steps in the map feature set: <br>• `applyMapButtonStyle` keeps button layout consistent for Open/Create/Save. <br>• `promptMapSelection` wraps `getAllMapFiles` + `MapSelectModal` and displays an empty-state notice. <br>• `promptCreateMap` reuses `NameInputModal` and `createHexMapFile`, then displays a success notice. <br>• `renderHexMapFromFile` handles the standard render path (`getFirstHexBlock` → `parseOptions` → `renderHexMap`) and provides fallback messaging. | Map Editor and Map Gallery rely on these utilities to stay in sync. |
| `map-header.ts` | Builds the shared header with title, Open/Create buttons, and Save dropdown. It configures buttons (`applyMapButtonStyle`), calls `promptMapSelection`/`promptCreateMap`, and wraps default save flows (`saveMap`/`saveMapAs`). `secondaryLeftSlot` allows a custom section in the second row, while `titleRightSlot` fills space next to the title (e.g. mode switches). The handle exposes both slots for advanced controls. An optional `onSave` hook lets features run persistence steps before or after saving. | Used by Cartographer, Travel Guide, and Gallery entry points. |
| `map-manager.ts` | Maintains the current map state and coordinates Open/Create/Delete via `promptMapSelection`, `promptCreateMap`, `ConfirmDeleteModal`, and `deleteMapAndTiles`. Emits changes through `onChange` so views can update headers and stages. | Cartographer header and gallery entry points depend on the manager to provide consistent map management. |
| `view-container.ts` | Provides a flexible view host with optional camera controls (MMB pan, wheel zoom) and overlay handling. | Cartographer mounts `renderHexMap` within this container; the layout editor consumes the same binding. |

## Search dropdown

Central building block: `ui/search-dropdown.ts` with `enhanceSelectToSearch(select, placeholder)`.

- Behaviour
  - Always opens the suggestion list when focused for quick selection, filters live while typing.
  - Keyboard support: arrow keys navigate, **Enter** confirms, **Escape** closes the menu.
  - Default behaviour displays all options when the query is empty; per-select overrides can disable this via `select.dataset.sdOpenAll = '0'`.
  - Width matches the source `select` element, letting the surrounding layout control sizing.

- Usage
  - Used across dialogs and views with large option sets (creatures/spells/regions/cartographer/map header).
  - Replaces the native `select` but still dispatches `change` on the original element for compatibility.

## Interaction with feature apps

1. **Create maps:** Features open `NameInputModal` to collect a title, then call `createHexMapFile(...)` from the core module.
2. **Select maps:** `MapSelectModal` offers a fuzzy search across the `TFile` list provided by `map-list.ts`.
3. **Confirm deletion:** Before invoking `deleteMapAndTiles(...)`, the gallery launches `ConfirmDeleteModal` to prevent accidental removals.

Centralising these flows allows copy, styling, and UX tweaks to propagate without touching feature-specific views.
