import { promises as fs } from "fs";
import path from "path";
import { fileURLToPath } from "url";

const ROOT = path.resolve(path.dirname(fileURLToPath(import.meta.url)), "..");
const componentsDir = path.join(ROOT, "src", "elements", "components");
const manifestPath = path.join(ROOT, "src", "elements", "component-manifest.ts");

const entries = await fs.readdir(componentsDir, { withFileTypes: true });
const components = entries
    .filter(entry => entry.isFile() && entry.name.endsWith(".ts"))
    .map(entry => entry.name)
    .sort((a, b) => a.localeCompare(b, "de"));

const lines = [
    "// Auto-generated by scripts/generate-component-manifest.mjs",
    "// Do not edit manually.",
    "import type { LayoutElementComponent } from \"./base\";",
    "",
];

const imports = components.map(file => {
    const base = file.replace(/\.ts$/, "");
    const identifier = base
        .replace(/[-_]([a-z])/g, (_, c) => c.toUpperCase())
        .replace(/^[a-z]/, c => c.toUpperCase());
    const safe = identifier.replace(/[^a-zA-Z0-9]/g, "");
    const localName = safe.charAt(0).toLowerCase() + safe.slice(1) + "Component";
    return { file: `./components/${base}`, name: localName };
});

for (const { file, name } of imports) {
    lines.push(`import ${name} from \"${file}\";`);
}

lines.push("", "export const COMPONENTS: LayoutElementComponent[] = [");
for (const { name } of imports) {
    lines.push(`    ${name},`);
}
lines.push("];\n");

await fs.writeFile(manifestPath, lines.join("\n"));
