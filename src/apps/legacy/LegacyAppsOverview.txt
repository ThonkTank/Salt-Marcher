# Legacy Apps – Übersicht

## Struktur

```
src/apps/legacy/
├─ LegacyAppsOverview.txt      # Dieses Dokument
├─ map-gallery.ts              # Weiterleitung in den Cartographer
├─ map-editor/
│  ├─ MapEditorLegacyOverview.txt
│  ├─ index.ts                 # Barrel-Export für Konsument:innen
│  └─ view.ts                  # Wrapper-View für den Editor-Modus
└─ travel-guide-view/
   └─ index.ts                 # Plugin + View für den alten Travel Guide
```

> Alle Dateien in `legacy/` dienen ausschließlich der Rückwärtskompatibilität.
> Neue Features sollen direkt im Cartographer oder Terrain Editor umgesetzt werden.

---

## Features & Verantwortlichkeiten

- **View-Wrapper:** Hält frühere View-Typen (`map-editor-view`, `hex-gallery-view`, `travel-guide-view`) am Leben und
  leitet sie intern an den Cartographer weiter.
- **Kompatibilitäts-Exports:** Stellt sicher, dass bestehende Importe (`src/apps/map-editor/*`, `src/apps/map-gallery`)
  weiterhin funktionieren, obwohl die Implementierung ausgelagert wurde.
- **Minimalpflege:** Vermeidet Funktionsänderungen; Anpassungen konzentrieren sich darauf, Nutzer:innen sanft auf die
  neuen Flows hinzuweisen.

---

## Datei-Rollen

### `map-gallery.ts`
- Öffnet beim Mounten direkt den Cartographer und zeigt einen Hinweis, dass die Galerie integriert wurde.
- Schliesst die Legacy-View automatisch, sobald der Cartographer aktiv ist.

### `map-editor/view.ts`
- Siehe `MapEditorLegacyOverview.txt` für detaillierte Beschreibung.
- Sorgt für Editor-Modus im Cartographer und synchronisiert den gespeicherten `mapPath`.

### `travel-guide-view/index.ts`
- Registriert weiterhin den `travel-guide-view` und montiert den Cartographer im Travel-Modus (`mountTravelGuide`).
- Bietet Legacy-Commands & Ribbon-Icon, damit alte Workspaces ohne Migration öffnen.
