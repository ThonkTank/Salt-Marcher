# Map Editor – Übersicht (Legacy Wrapper)

## Struktur

```
src/apps/map-editor/
├─ MapEditorOverview.txt       # Dieses Dokument
├─ index.ts                    # Obsidian-View als Wrapper für den Cartographer-Editor-Modus
├─ brush-circle.ts             # Kompatibilitäts-Reexport → cartographer/editor/tools/brush-circle
├─ tools-api.ts                # Kompatibilitäts-Reexport → cartographer/editor/tools/tools-api
└─ terrain-brush/
   ├─ brush-options.ts         # Kompatibilitäts-Reexport → cartographer/editor/tools/terrain-brush/brush-options
   ├─ brush.ts                 # Kompatibilitäts-Reexport → cartographer/editor/tools/terrain-brush/brush
   └─ brush-math.ts            # Kompatibilitäts-Reexport → cartographer/editor/tools/terrain-brush/brush-math
```

> Die eigentliche Editor-Infrastruktur liegt nun im Cartographer unter `editor/`. Dieses Verzeichnis dient ausschließlich dazu, bestehende Imports aus dem Legacy-Map-Editor kompatibel zu halten.

---

## Features & Verantwortlichkeiten

- **Wrapper-View:** `index.ts` mountet den Cartographer (`sm-cartographer`-Shell) und schaltet direkt in den Editor-Modus. Der View bleibt kompatibel mit bestehenden Commands/States, leitet aber sämtliche Karten-Interaktionen an die gemeinsame Shell weiter.
- **Reexport-Layer:** Alle früheren Tool-Module werden als dünne Reexports auf den neuen Namespace `cartographer/editor/tools/*` bereitgestellt, sodass alte Imports nicht brechen.
- **Migrationshinweis:** Neue Entwicklungen sollen direkt im Cartographer-Namespace stattfinden; dieses Verzeichnis markiert den Legacy-Einstiegspunkt.

---

## Datei-Rollen

### `index.ts`
- Registriert den View-Type `map-editor-view` und zeigt weiterhin „Map Editor“ als Titel.
- Mountet `mountCartographer` und erzwingt den Editor-Modus (`controller.setMode("editor")`).
- Synchronisiert View-State (`mapPath`) mit dem Cartographer-Controller (`setFile`).

### `brush-circle.ts`
- Reexportiert `cartographer/editor/tools/brush-circle` zur Wahrung der API-Stabilität.

### `tools-api.ts`
- Reexportiert `cartographer/editor/tools/tools-api`, damit Legacy-Tools weiter funktionieren.

### `terrain-brush/brush-options.ts`
- Reexportiert `cartographer/editor/tools/terrain-brush/brush-options` (UI für Terrain-Brush) – der Funktionscode liegt nun dort.

### `terrain-brush/brush.ts`
- Reexportiert `cartographer/editor/tools/terrain-brush/brush` (Persistenz & Live-Fill) aus dem neuen Namespace.

### `terrain-brush/brush-math.ts`
- Reexportiert `cartographer/editor/tools/terrain-brush/brush-math` (Hex-Radius-Helfer) aus dem neuen Namespace.

