# Map Editor – Übersicht

## Struktur

```
src/apps/map-editor/
├─ index.ts                    # Obsidian-View als Wrapper für den Cartographer-Editor-Modus
├─ MapEditorOverview.txt       # Dieses Dokument
├─ brush-circle.ts             # SVG-Kreis als Brush-Vorschau (Pointertracking)
├─ tools-api.ts                # Tool-Kontrakt (Context, Hooks, Controller)
└─ terrain-brush/
   ├─ brush-options.ts         # Brush-Tool (UI, Radius-/Terrainwahl, Live-Vorschau)
   ├─ brush.ts                 # Brush-Anwendung (Tiles schreiben/löschen, Live-Fill)
   └─ brush-math.ts            # Hex-Radius-Berechnungen (odd-r ↔ axial)
```

> Die eigentliche Editor-Oberfläche wird nun im Cartographer unter `modes/editor.ts` betrieben. Die hier verbleibenden Module stellen weiterhin UI- und Tool-Funktionen bereit.

---

## Features & Verantwortlichkeiten

- **Wrapper-View:** `index.ts` mountet den Cartographer (`sm-cartographer`-Shell) und schaltet direkt in den Editor-Modus. Der View bleibt kompatibel mit bestehenden Commands/States, leitet aber sämtliche Karten-Interaktionen an die gemeinsame Shell weiter.
- **Tool-Schnittstelle:** `tools-api.ts` definiert den Kontext (`getHandles`, `getOptions`, `setStatus` …) für Editier-Tools. Der Cartographer-Editor erzeugt Instanzen dieses Kontextes, triggert `onActivate`, `onMapRendered` sowie `onHexClick` und montiert Tool-UIs im geteilten Sidebar-Panel (`.sm-cartographer__panel--editor`).
- **Brush-Infrastruktur:** `terrain-brush/*` stellt UI, Mathematik und Persistenz (Tiles schreiben/löschen) für das Terrain-Brush-Tool bereit. `brush-circle.ts` visualisiert den aktiven Radius direkt auf dem SVG.
- **Inspector-Verlagerung:** Der Terrain-/Notiz-Inspector lebt nun als eigener Cartographer-Modus (`modes/inspector.ts`) und nutzt dort die gemeinsamen Render-/Persistenz-Hooks.

---

## Öffentliche Schnittstellen

### `tools-api.ts`

```ts
export type ToolContext = {
  app: App;
  getFile(): TFile | null;
  getHandles(): RenderHandles | null;
  getOptions(): HexOptions | null;
  setStatus(msg: string): void;
};

export type ToolModule = {
  id: string;
  label: string;
  mountPanel(root: HTMLElement, ctx: ToolContext): () => void;
  onActivate?(ctx: ToolContext): void;
  onDeactivate?(ctx: ToolContext): void;
  onMapRendered?(ctx: ToolContext): void;
  onHexClick?(rc: { r: number; c: number }, ctx: ToolContext): Promise<boolean | void> | boolean | void;
};
```

> Der Cartographer-Modus registriert Tools über diese Schnittstelle und montiert ihr Panel in den Sidebar-Container.

---

## Datei-Rollen

### `index.ts`
- Registriert den View-Type `map-editor-view` und zeigt weiterhin „Map Editor“ als Titel.
- Mountet `mountCartographer` und erzwingt den Editor-Modus (`controller.setMode("editor")`).
- Synchronisiert View-State (`mapPath`) mit dem Cartographer-Controller (`setFile`).

### `brush-circle.ts`
- Erzeugt einen SVG-Kreis, der Pointer-Bewegungen im Overlay trackt und via `show/hide/updateRadius` steuerbar ist.

### `terrain-brush/brush-options.ts`
- UI-Factory für den Brush: Radius-Slider, Terrain-Auswahl inkl. Live-Updates aus dem Terrain-Editor, Mal-/Löschmodus.
- Bindet den Kreis (`attachBrushCircle`) an das aktuelle `RenderHandles`-Overlay und aktualisiert ihn bei Kartenwechseln.

### `terrain-brush/brush.ts`
- Persistiert Brush-Aktionen per `saveTile`/`deleteTile` und färbt die betroffenen Polygone live über `handles.setFill`.

### `terrain-brush/brush-math.ts`
- Konvertiert odd-r Koordinaten in Axial-Koordinaten und liefert `coordsInRadius`/`hexDistanceOddR` zur Brush-Berechnung.

*(Legacy-Inspector entfernt: Umsetzung erfolgt nun im Cartographer unter `modes/inspector.ts`.)*

