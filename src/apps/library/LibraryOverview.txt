# Library – Overview

Einheitliche Bibliothek mit gemeinsamem Header und identischer Listen‑UX für vier Modi:
- Terrains
- Regionen
- Kreaturen
- Zauber (Spells)

Die Library bündelt Suche, Erstellen‑Fluss und Öffnen der Quelldateien. Sie beobachtet ihre Datenquellen live und aktualisiert die Liste ohne Reload. Ziel ist ein zentraler, erweiterbarer Einstiegspunkt für Inhalte, die andere Features (z. B. Cartographer/Travel) referenzieren.

## Struktur

```
src/apps/library/
├─ core/
│  ├─ creature-files.ts     # FS‑Utilities für Creatures (ensure/list/watch/create)
│  └─ spell-files.ts        # FS‑Utilities für Spells (ensure/list/watch/create)
├─ create/
│  ├─ creature/
│  │  ├─ index.ts             # Exportiert Modal-/Mount-Hilfen und Markdown-Speicherlogik
│  │  ├─ modal.ts             # Einspaltiges Formular + Modal-Hülle für den Statblock-Editor
│  │  └─ statblock.ts         # State-Typen, Parser-Helfer und Markdown-Generator
│  ├─ spell/
│  │  ├─ index.ts             # Re-export für externe Zugriffe auf das Spell-Modal
│  │  └─ modal.ts             # Modal zum Anlegen von Spells
│  ├─ index.ts                # Bündelt die Modal-Exporte für `view.ts`
│  └─ shared/
│     ├─ stat-utils.ts        # Gemeinsame Berechnungshelfer für Ability-Mods & Vorzeichenformatierung
│     └─ token-editor.ts      # Gemeinsame Token-Editor-Utility für Chips-Eingaben
├─ view.ts                  # Obsidian-View mit Modus‑Tabs, Suche, Liste
└─ LibraryOverview.txt      # Dieses Dokument
```

## Features & Verantwortlichkeiten

- Modus‑Tabs: Schaltet zwischen Creatures, Spells, Terrains, Regions.
- Suche: Ein Textfeld filtert die Liste live (Prefix/Substring‑Priorisierung).
- Erstellen‑Flow pro Modus:
  - Terrains: legt neuen Eintrag mit Defaultwerten an (`#888888`, `speed: 1`).
  - Regionen: legt neuen Eintrag ohne Terrain/Encounter an.
  - Creatures/Spells: öffnet ein Modal, erzeugt eine `.md`‑Datei im passenden Ordner und öffnet sie im Editor.
- Creature-Modal (`create/creature/modal.ts`) liefert ein einspaltiges Formular mit Pflichtfeld-Validierung. Abschnitte decken Identität, Kampfwerte, Ability Scores, Listen (Resistances/Immunities/Vulnerabilities/Senses/Languages) sowie Freitextbereiche für Traits, Actions, Bonus Actions, Reactions und Legendary Actions ab. Ein `<details>`-Block bündelt optionale Angaben (Initiative, Saving Throws samt Overrides, Skill-Liste, Equipment/Notes, XP). Spellcasting erlaubt At-Will-Listen und dynamisch anlegbare Gruppen für „pro Tag“, „pro Rast“, „Spell Slots“ und weitere Kategorien.【F:src/apps/library/create/creature/modal.ts†L74-L298】
- Ein-Klick-Speichern: `openCreatureCreator` verknüpft das Modal mit `saveCreatureMarkdownFile`. Nach dem Submit erzeugt `buildStatblockMarkdown` den Text und legt ihn sofort im Creatures-Verzeichnis ab; Aufrufer erhalten Datei-Handle, Markdown und State zur Weiterverarbeitung (z. B. Listen-Refresh, Editor öffnen).【F:src/apps/library/create/creature/index.ts†L1-L42】
- Geteilte Stat-Utilities (`create/shared/stat-utils.ts`) bündeln Parsing, Modifikator-Logik und Vorzeichenformatierung für alle Abschnitte – nutzbar auch für zukünftige Modals (z. B. Items oder NPC-Varianten).
- Öffnen: Ein Button pro Eintrag öffnet die Quelle (Datei bzw. Sammeldatei) in Obsidian.
- Live‑Updates: Nutzt Watcher für Ordner/Dateien, um die Liste bei Änderungen neu zu laden.

## Datenflüsse

- Terrains: `core/terrain-store.ts` stellt `ensureTerrainFile → loadTerrains → saveTerrains → watchTerrains` bereit. Die Library parst/validiert und schreibt Einträge konsistent (inkl. „leeres Terrain“ mit `transparent` und `speed: 1`).
- Regionen: `core/regions-store.ts` analog mit `ensureRegionsFile → loadRegions → saveRegions → watchRegions`. Einträge speichern ihren Namen, Terrain‑Referenz und optionale Encounter‑Odds (`1/n`).
- Creatures: `apps/library/core/creature-files.ts` verwaltet den Ordner `SaltMarcher/Creatures/` (Ensure/List/Watch/Create). Dateien sind Markdown mit YAML‑Frontmatter; strukturierte Einträge können als JSON in FM abgelegt werden.
- Spells: `apps/library/core/spell-files.ts` verwaltet `SaltMarcher/Spells/` (Ensure/List/Watch/Create). Dateien sind Markdown mit YAML‑Frontmatter; Text liegt im Body.

## Dateibeschreibungen

### `view.ts`
- Obsidian‑View `VIEW_LIBRARY` mit Modus‑Tabs, Suchfeld und Ergebnisliste.
- Lädt initial alle Quellen: Creatures, Spells, Terrains, Regions.
- Registriert Watcher: `watchCreatureDir`, `watchSpellDir`, `watchTerrains`, `watchRegions` → ruft `renderList()` bei Änderungen.
- Terrains/Regions: Inline‑Bearbeitung (Inputs) mit sofortiger Persistenz (`saveTerrains`/`saveRegions`).
- Nutzt `enhanceSelectToSearch` für komfortable Dropdowns (z. B. Terrain‑Zuweisung in Regions).

### `core/creature-files.ts`
- `ensureCreatureDir`, `listCreatureFiles`, `watchCreatureDir`, `createCreatureFile`.
- Verantwortlich für Verzeichnis‑Struktur, Dateibenennung und den Markdown-Export inklusive YAML-Feldern für Resistances/Immunities/Vulnerabilities sowie eines optionalen Equipment-&-Notes-Abschnitts im Body.【F:src/apps/library/core/creature-files.ts†L7-L152】

### `core/spell-files.ts`
- `ensureSpellDir`, `listSpellFiles`, `watchSpellDir`, `createSpellFile`.
- Analog zu Creatures, eigener Ordner.

### `create/creature/modal.ts`
- Stellt `mountCreatureCreator` bereit, das ein einspaltiges Formular samt Pflichtfeld-Validierung rendert, State↔DOM synchronisiert und bei Submit `onSubmit({ statblock, markdown })` auslöst. Optionale Werte (Initiative, Saves, Skills, Equipment, XP) liegen in einem `<details>`-Block.
- `CreateCreatureModal` kapselt den Formular-Mount in einem Obsidian-Modal und reicht Cancel-/Submit-Ereignisse an Aufrufer weiter. So können Call-Sites das UI entweder eingebettet mounten oder als Modal öffnen.
- Spellcasting-Innereien (At-Will-Textarea plus dynamische Gruppen pro Frequenztyp) werden direkt hier gepflegt – zusätzliche Typeahead- oder Preset-Logik kann später ergänzt werden, ohne andere Module zu berühren.【F:src/apps/library/create/creature/modal.ts†L74-L298】

### `create/creature/index.ts`
- Exportiert `CreateCreatureModal`, `mountCreatureCreator`, `openCreatureCreator`, `saveCreatureMarkdownFile` und den Markdown-Builder. `openCreatureCreator(app, { initial, onSaved })` öffnet das Modal, speichert das Ergebnis im Creatures-Ordner und gibt Aufrufern Datei/State/Markdown zurück.

### `create/index.ts`
- Bündelt die Erstellungs-API: re-exportiert `CreateCreatureModal`, `openCreatureCreator`, `mountCreatureCreator`, `saveCreatureMarkdownFile` sowie `CreateSpellModal`. So kann `view.ts` beide Workflows über einen Import konsumieren.

### `create/creature/statblock.ts`
- Definiert `CreatureStatblock`, Ability-/Skill-Konstanten und Hilfsfunktionen (`createEmptyStatblock`, `cloneStatblock`, `parseListInput`, `createSpellGroup`, `ensureSkillName`).
- `buildStatblockMarkdown` erzeugt den Markdown-Body: Kopf mit Name/Größe/Typ/Gesinnung, AC/HP/Speed-Zeilen, Ability-Tabelle (inkl. Modifikatoren), Listen für Saves/Skills/Resistenzen/Immunitäten/Vulnerabilitäten/Sinne/Sprachen, Challenge-Block samt optionalem XP sowie strukturierte Spellcasting-Listen und Equipment-Abschnitt.【F:src/apps/library/create/creature/statblock.ts†L1-L211】

### `create/shared/stat-utils.ts`
- Fasst `parseIntSafe`, `abilityMod` und `formatSigned` zusammen, damit UI-Sektionen identische Rechenregeln verwenden.
- Geeignet für weitere Modals (z. B. Item- oder NPC-Editoren), die Trefferwürfe, Saves oder Schadensformeln automatisch ableiten möchten.
- Warum: Reduziert Duplikate, verhindert auseinanderlaufende Formeln und erleichtert Tests für gemeinsames Verhalten.

### `create/spell/modal.ts`
- Modal zum Anlegen neuer Zauberdateien mit Komfortfeldern und direktem Aufruf von `createSpellFile`.
- Verwendet `shared/token-editor`, um die Klassenliste als Chip-Liste zu bearbeiten und dieselbe UX wie in Creature-Abschnitten zu bieten.
- Warum: Dedizierte UI für Spell-Erstellung; bleibt unabhängig vom Creature-Flow.

### `create/shared/token-editor.ts`
- Kapselt Setting-Aufbau, Input-Handling und Chip-Rendering für freie Listen (z. B. Klassen, Sinne, Sprachen).
- Bietet optionale Add/Remove-Callbacks und einen Refresh-Hook, um konsistente Token-Editoren in allen Formularen zu gewährleisten.

### `create/spell/index.ts`
- Exportiert `CreateSpellModal` mit kurzem Pfad und erlaubt konsistente Aggregation über `create/index.ts`.

## Interaktion mit Core & UI

- Terrains: Änderungen werden über `saveTerrains` geschrieben; `watchTerrains` aktualisiert die Library‑Liste und triggert global die Terrain‑Palette (wird vom Renderer konsumiert).
- Regionen: Schreiben über `saveRegions`, Live‑Reload über `watchRegions`.
- UI: Nutzt `ui/search-dropdown.ts` für durchsuchbare Selects; allgemeine Notices/Dialoge stammen aus Obsidian.

## Erweiterungspunkte

- Weitere Modi: Die Library lässt sich um zusätzliche Tabs erweitern (z. B. „Items“), sofern die Datenquelle über ein analoges FS‑ oder Store‑Modul abstrahiert wird (ensure/list/save/watch).
- Validierung: Zusätzliche Validierungslogik kann in die Inline‑Editoren (Inputs) integriert werden, ohne die Persistenz‑Services zu ändern.

## Speicherorte & Formate

- Terrains: `SaltMarcher/Terrains.md` mit einem ```terrain```‑Codeblock. Einträge: `Name: #aabbcc, speed: 0.8` oder `: transparent, speed: 1` für „leer“.
- Regionen: `SaltMarcher/Regions.md` mit ```regions```‑Block. Einträge: `Name: Terrain, encounter: 1/n` (optional).
- Creatures: Einzeldateien unter `SaltMarcher/Creatures/` (Markdown + YAML‑FM, optional strukturierte JSON‑Felder in FM).
- Spells: Einzeldateien unter `SaltMarcher/Spells/` (Markdown + YAML‑FM, Text im Body).

Diese Struktur hält Daten und Darstellung sauber getrennt. Die Library fungiert als zentraler, risikoarmer Editor‑Hub, während andere Features (z. B. Cartographer/Travel) diese Daten konsumieren, ohne eigene Editoren pflegen zu müssen.
