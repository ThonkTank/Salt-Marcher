# Creature Creation Overview

## Strukturübersicht
```
creature/
├─ index.ts     – Bündelt Export-Hilfen (Modal öffnen, Formular einbetten, Markdown speichern).
├─ modal.ts     – Rendert das einspaltige Formular, verwaltet State und Validierung, triggert Speichern.
└─ statblock.ts – Definiert den `CreatureStatblock`, Utility-Funktionen und erzeugt Markdown aus dem State.
```

## Features & Hauptzuständigkeiten
- **Einspaltiger Dialog mit Pflichtfeldern:** `modal.ts` zeigt ein lineares Formular mit Abschnitten für Identität, Kampfwerte, Ability Scores, Listen (Resistances/Immunities/Vulnerabilities/Senses/Languages) sowie freie Textbereiche für Traits, Actions, Bonus Actions, Reactions und Legendary Actions. Die Pflichtfelder (Name, Größe, Typ, Gesinnung, AC, HP, Speed, STR–CHA, CR, PB) werden überwacht; der Speichern-Button bleibt deaktiviert, bis alle Werte gesetzt sind.
- **Erweiterte Werte bei Bedarf:** Ein `<details>`-Block "Erweiterte Werte" bündelt optionale Angaben. Dazu gehören Initiative (Checkbox + Eingabefeld), Saving Throws (Checkbox je Ability + optionaler Override), eine Skill-Liste mit Select+Bonusfeld, ein Equipment-/Notes-Textarea sowie ein XP-Toggle, der das Challenge-Rating um XP ergänzt. Alle Eingaben werden nur in den Export übernommen, wenn sie aktiv sind bzw. Text enthalten.
- **Spellcasting-Struktur:** Spellcasting sammelt Ability/Save-DC/Attack-Bonus und trennt vorbereitete Listen: `At Will` (Textarea) sowie dynamisch anlegbare Gruppen für `pro Tag`, `pro Rast`, `Spell Slots` und `Weitere`. Eingaben werden per Zeilen-/Kommatrennung in Arrays normalisiert.
- **Markdown-Export:** Beim Speichern erzeugt `buildStatblockMarkdown` aus dem kompletten `CreatureStatblock` ein Markdown-Dokument mit Kopfzeile, AC/HP/Speed-Zeile, Ability-Tabelle (inkl. Modifikatoren), Listen für Saves/Skills/Resistenzen/Sinne/Sprachen, Challenge-Block (CR/PB/XP), Abschnittsüberschriften mit den Freitexten sowie optionalem Spellcasting- und Equipment-Abschnitt.
- **Dateiablage:** `openCreatureCreator` nutzt `saveCreatureMarkdownFile`, um den Markdown-String direkt im Creatures-Verzeichnis anzulegen. Dateinamen werden über `sanitizeFileName` generiert und bei Kollisionen automatisch hochgezählt.
- **Mount-/Unmount-Hilfe:** Neben dem Modal-Workflow stellt `mountCreatureCreator` einen reinen Formular-Mount bereit (für Tests oder alternative Hosts). Das Handle bietet `destroy`, `getState` und `update`, um externe Container zu unterstützen.

## Datei-Details
- **index.ts:** Exportiert `CreateCreatureModal`, `mountCreatureCreator`, `openCreatureCreator`, `saveCreatureMarkdownFile` und den Markdown-Builder. `openCreatureCreator(app, { initial, onSaved })` öffnet das Modal, speichert die Datei und liefert `TFile`, Markdown und State an Aufrufer. `saveCreatureMarkdownFile` erzeugt bei Bedarf selbstständig Markdown und legt die `.md` im `SaltMarcher/Creatures/`-Ordner ab.
- **modal.ts:** Enthält `mountCreatureCreator` und die Modal-Hülle. `mount` baut das Formular, synct DOM ↔ State (inkl. Parsen von Listen & Spell-Gruppen), validiert Pflichtfelder und ruft `onSubmit({ statblock, markdown })`. `CreateCreatureModal` kapselt das Mounting innerhalb eines Obsidian-Modals und leitet Submit/Cancel an Aufrufer weiter.
- **statblock.ts:** Definiert `CreatureStatblock`, Hilfsfunktionen (`createEmptyStatblock`, `cloneStatblock`, `parseListInput`, `createSpellGroup`, `ensureSkillName`) und `buildStatblockMarkdown`. Der Builder formatiert Ability-Modifikatoren, kombiniert Save-/Skill-Boni automatisch mit PB (wenn kein Override vorliegt) und rendert Spellcasting-Listen als Markdown-Aufzählungen.
