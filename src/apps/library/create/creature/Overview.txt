# Creature Creation Overview

## Strukturübersicht
```
creature/
├─ index.ts      – Registriert den Creator als Modal und gibt Mount-/Unmount-Hilfen frei.
├─ modal.ts      – Rendert das Einspalten-Formular, sammelt Eingaben und löst Speichern aus.
└─ statblock.ts  – Definiert den `CreatureStatblock`, stellt Defaults bereit und erzeugt Markdown.
```
Alle früheren Untersektionen (`section-*`, `presets.ts`) entfallen, damit nur noch die minimal nötigen Dateien übrig bleiben.

## Features & Hauptzuständigkeiten
- **Einfacher Einspalten-Dialog:** `modal.ts` zeigt ein vertikales Formular mit kompakten Fieldsets für Basisdaten, Attributwerte, Ressourcen (Resistances/Immunities/Vulnerabilities), Sinne/Sprachen sowie freie Textbereiche für Traits, Actions, Bonus Actions, Reactions, Legendary Actions und Spellcasting. Pflichtfelder (Name, Größe, Typ, Gesinnung, AC, HP, Speed, STR–CHA, CR, PB) werden direkt validiert und verhindern das Speichern, bis sie ausgefüllt sind.
- **Optionale Kopf-Erweiterungen:** Ein separates Feldset für "Erweiterte Werte" blendet bei Bedarf zusätzliche Eingaben ein. Dazu gehören Initiative (Text/Nummer), selektierbare Rettungswürfe (Checkbox für jede Ability + Override-Feld), Skills (Mehrfachauswahl aus Liste + Modifikator-Eingabe), Gear/Equipment (Freitext), sowie ein optionales XP-Feld, das gemeinsam mit dem CR angezeigt wird. Alle Inputs sind optional und werden nur in den Export übernommen, wenn sie gefüllt oder explizit aktiviert sind.
- **Markdown-Export ohne Zusätze:** Der Speichern-Button ruft `buildStatblockMarkdown` aus `statblock.ts` auf. Die Funktion generiert eine vollständige `.md`-Datei im Standardlayout (Kopfzeile, Grundwerte, Attribut-Tabelle, Verteidigung, Sinne/Sprachen, Challenge-Zeile mit CR/PB/XP, Abschnittsüberschriften mit Listen für Aktionen). Spellcasting-Informationen werden als eigener Abschnitt mit Ability, Save DC, Attack Bonus und vorbereiteten Listen (At-Will, X/Day, Slots) ausgegeben. Initiative, Rettungswürfe, Skills und Gear erscheinen in den passenden Kopf- bzw. Feature-Blöcken, sobald sie Daten enthalten.
- **Dateiablage mit Minimalkonfiguration:** `index.ts` reicht den vom Modal gelieferten Markdown-String an das bestehende Dateiservice der Library weiter (`saveMarkdownFile`). Damit genügt ein einziger Schreibaufruf, um die `.md`-Datei im Bibliotheksverzeichnis abzulegen.
- **Schlanke State-Verwaltung:** Die Formularwerte liegen in einem einzigen `CreatureStatblock`-State-Objekt. Hilfsfunktionen wie `updateAbility(scoreKey, value)`, `toggleSave(ability)`, `updateSkill(skillKey, value)` oder `updateList(fieldKey, rawText)` halten die Struktur konsistent, ohne dedizierte Unterkomponenten. Für optionale Felder werden Defaultwerte (z. B. `null` für Initiative, leere Arrays für Skills/Gear) genutzt, damit ungenutzte Angaben nicht exportiert werden.

## Datei-Details
- **index.ts:** Stellt `mountCreatureCreator(root, initialData?)` bereit, das das Modal lazy lädt, den optionalen Startwert ins Formular injiziert und beim Speichern `saveMarkdownFile(name, markdown)` aufruft. Außerdem exportiert es `openCreatureCreator()` für Call-Sites, die nur den Dialog anzeigen möchten.
- **modal.ts:** Implementiert das tatsächliche Modal mit einer einfachen Formularspalte. Die Datei enthält die lokale State-Verwaltung (`createStatblockState()`), Input-Handler für Textfelder, Number-Inputs, Mehrfachauswahlen und Multi-Line Textareas sowie die Validierung für Pflichtfelder. Ein Unterabschnitt "Erweiterte Werte" kapselt die Optionstoggles für Initiative, Rettungswürfe, Skills, Gear und XP. Beim Speichern wird `buildStatblockMarkdown(state)` aufgerufen und das Ergebnis via Callback zurückgegeben.
- **statblock.ts:** Hält den `CreatureStatblock`-Typ inklusive aller Pflichtfelder (Meta, Ability Scores, Combat Stats, Sinnes-/Sprachlisten, Traits/Aktionen/Spellcasting als Markdown-Strings) und optionaler Felder (Initiative, ausgewählte Saves inkl. Bonus, Skills mit Bonus, Gear-Liste, XP). `createEmptyStatblock()` liefert Defaultwerte. `buildStatblockMarkdown(statblock)` rendert den Markdown-String: Kopfbereich mit Name/Größe/Typ/Gesinnung + Initiative, anschließend AC/HP/Hit Dice/Speed, Tabelle mit STR–CHA (Score & Mod), Auflistungen für Saves/Skills/Resistances/Immunities/Vulnerabilities, Block für Sinne/Sprachen, Challenge Rating/PB/XP sowie formatierte Listen für Traits, Actions, Bonus/Reactions, Legendary Actions, Gear und Spellcasting.
