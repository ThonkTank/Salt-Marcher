# Creature Creator Dialog – Overview

## Struktur
```
src/apps/library/create/creature/
├── index.ts                  # Barrel-Exports für Modal & Abschnitts-Mounter
├── modal.ts                  # Einstiegspunkt, orchestriert Abschnitte & Submit-Flow
├── presets.ts                # Vordefinierte Auswahlwerte (Größen, Typen, Skills, Sinne, Sprachen …)
├── section-basics.ts         # Identity-, Kernwert- und Bewegungs-Editor
├── section-stats-and-skills.ts # Ability-, Save- und Skill-Editor mit Mod-Neuberechnung
├── section-senses-and-defenses.ts # Sinne, Sprachen, Passives, Schadenstyp-Antworten & Gear
├── section-utils.ts          # Geteilte Preset-/Damage-Editor-Helfer für Sections
├── section-entries.ts        # Strukturierte Einträge (Traits, Aktionen …)
└── section-spells-known.ts   # UI-Abschnitt für bekannte Zauber und Auswahl-Logik
```

## Dialog-Flow
1. **Initialisierung:** `CreateCreatureModal` legt ein frisches `StatblockData` an, verhindert Outside-Click-Closes und startet das asynchrone Laden der Zauberdateiliste.
2. **Abschnitts-Mounting:** Das Modal ruft nacheinander `mountCreatureBasicsSection`, `mountCreatureStatsAndSkillsSection`, `mountCreatureSensesAndDefensesSection`, `mountEntriesSection` und `mountSpellsKnownSection` auf. Jede Section erhält das gemeinsame Datenobjekt und pflegt ihren Teilbereich eigenständig.
3. **Grunddaten & Bewegung:** Die Basics-Section verwaltet Name, Größe, Typ, Gesinnung, Kernwerte sowie Bewegungsarten; die Bewegungsauswahl sitzt in einer einzeiligen Such-/Input-Leiste mit Hover-Toggle und kompaktem `+`-Button, neue Speed-Einträge landen als Chips in `speedList`.
4. **Ability/Skill-Bereich:** Die Stats-&-Skills-Section rendert Ability-Karten mit Save-Proficiencies, kümmert sich um Skill-Chips samt Expertise-Toggle und berechnet Modifikatoren nach jeder Änderung automatisch.
5. **Sinne/Verteidigung:** Sinne/Sprachen/Passives nutzen Preset-Suchdropdowns mit rechtsbündigem Suchfeld, Schadenstyp-Reaktionen teilen sich einen Editor mit Status-Schaltern, Zustandsimmunitäten und Gear werden via Chips gepflegt.
6. **Submission:** Buttons am Ende schließen das Modal oder reichen das `StatblockData` an den Callback weiter; `onClose`/`onunload` stellen Pointer-Events des Hintergrunds wieder her.

## Features & Zuständigkeiten
- **Modulare Abschnittsstruktur:** Jede Eingabegruppe ist in ein eigenes Skript ausgelagert, wodurch UI-Logik, State-Hooks und Preset-Helfer getrennt wartbar bleiben.【F:src/apps/library/create/creature/modal.ts†L5-L55】
- **Grunddaten & Movement-Chips:** Die Basics-Section kombiniert Identitätsfelder mit einem Movement-Editor, der Bewegungsarten in einer einzeiligen Suchleiste inkl. Hover-Toggle & `+`-Button verwaltet und Speed-Chips rendert.【F:src/apps/library/create/creature/section-basics.ts†L19-L146】
- **Ability-Karten mit Live-Mods:** Ability Scores, Saves und Skill-Proficiencies sitzen in einem Kartengrid; Änderungen aktualisieren Modifikatoren, Save-Boni und Expertise-Synchronisation sofort.【F:src/apps/library/create/creature/section-stats-and-skills.ts†L15-L143】
- **Suchbare Sinne/Sprachen & Schadenstyp-Editor:** Preset-gestützte Dropdowns ohne Inline-Labels decken Sinne, Sprachen und Passives jetzt mit gemeinsamem Rechtsausrichtungslayout ab, während ein kombinierter Schadenstyp-Editor Resistenz/Immunität/Verwundbarkeit über Status-Schalter steuert.【F:src/apps/library/create/creature/section-senses-and-defenses.ts†L42-L100】【F:src/apps/library/create/creature/section-utils.ts†L24-L125】
- **Geteilte Helfer:** `section-utils.ts` stellt `mountPresetSelectEditor` und `mountDamageResponseEditor` bereit, damit mehrere Abschnitte identische Chip-UX und Validierung nutzen können.【F:src/apps/library/create/creature/section-utils.ts†L1-L210】
- **Strukturierte Einträge & Zauber:** Traits/Aktionen und Zauberlisten behalten ihre bestehenden Module mit Typeahead- und Berechnungslogik; sie hängen direkt an `StatblockData` und reagieren auf Refresh-Signale aus dem Modal.【F:src/apps/library/create/creature/section-entries.ts†L12-L175】【F:src/apps/library/create/creature/section-spells-known.ts†L5-L68】

## Skript-Details
- **`index.ts`:** Bündelt alle öffentlichen Einstiegspunkte (Modal + Sections) und hält Importpfade für externe Verbraucher schlank.【F:src/apps/library/create/creature/index.ts†L1-L6】
- **`modal.ts`:** Obsidian-Modal, das Lebenszyklus, Abschnitts-Mounting, Spell-Refresh und Submit-Handling koordiniert.【F:src/apps/library/create/creature/modal.ts†L1-L62】
- **`presets.ts`:** Zentralisiert Auswahlwerte für Größen, Typen, Gesinnung, Bewegungsarten, Skills, Sinne, Sprachen, Passives, Schadenstypen und Zustände.【F:src/apps/library/create/creature/presets.ts†L1-L183】
- **`section-basics.ts`:** Verwaltet Identität, Kernwerte und Movement-UX (einzeilige Dropdown-/Hover-Leiste + Chip-Liste) innerhalb eines Settings-Layouts.【F:src/apps/library/create/creature/section-basics.ts†L19-L146】
- **`section-stats-and-skills.ts`:** Rendert das zweispaltige Ability-Grid, Save-Proficiencies, eine rechtsbündige Skill-Suche mit Chips/Expertise und synchronisiert alle Modifikatoren via `shared/stat-utils`.【F:src/apps/library/create/creature/section-stats-and-skills.ts†L15-L196】
- **`section-senses-and-defenses.ts`:** Kapselt Sinne/Sprachen/Passives über Preset-Dropdowns mit dem gleichen rechten Layout wie die Skills, kombiniert Schadenstypen mit Statusauswahl und deckt Gear + Zustandsimmunitäten über Chip-Editoren ab.【F:src/apps/library/create/creature/section-senses-and-defenses.ts†L1-L90】
- **`section-utils.ts`:** Gemeinsame Helper zum Mounten von Preset-Suchdropdowns und Schadenstyp-Reaktionseditoren für mehrere Sections.【F:src/apps/library/create/creature/section-utils.ts†L1-L210】
- **`section-entries.ts`:** Strukturierte Eingabemaske für Traits/Aktionen, inklusive Auto-Berechnungen für To-Hit, Saves und Schaden.【F:src/apps/library/create/creature/section-entries.ts†L12-L175】
- **`section-spells-known.ts`:** Spell-Liste mit Typeahead, Grad/Nutzung/Notizen und Refresh-Hook fürs Modal.【F:src/apps/library/create/creature/section-spells-known.ts†L5-L68】
