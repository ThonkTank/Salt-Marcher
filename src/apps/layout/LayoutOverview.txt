# Layout Editor – Overview

## Struktur

```
src/apps/layout/
├─ editor/
│  ├─ attribute-popover.ts   # Verwaltet das Attribute-Popover inklusive Events & Synchronisation
│  ├─ creature-import.ts     # Baut das Creature-Creator-Layout nach und erzeugt LayoutElemente
│  ├─ definitions.ts         # Konstanten (Element- & Attribut-Definitionen) + Label-Helfer
│  ├─ element-preview.ts     # Rendert Canvas-Vorschauen inkl. Inline-Editoren
│  ├─ history.ts             # Undo/Redo-Verwaltung für LayoutSnapshots
│  ├─ inline-edit.ts         # Generischer ContentEditable-Editor für Inline-Bearbeitung
│  ├─ inspector-panel.ts     # Inspector-Rendering (Formfelder, Container-Steuerung, Attribute-Trigger)
│  ├─ types.ts               # Gemeinsame Typen für Elemente, Container & Snapshots
│  ├─ utils.ts               # Hilfsfunktionen (clamp, Deep-Clones, Vergleichs-Utilities)
│  └─ view.ts                # `LayoutEditorView` – orchestriert Canvas, Inspector, Export & Historie
└─ LayoutOverview.txt        # Diese Übersicht
```

## Features & Verantwortlichkeiten

- **Layout-Arbeitsfläche:** Konfigurierbare Canvas mit Breite/Höhe-Controls; alle Elemente werden mit Bounds-Clamping gerendert und lassen sich direkt über ihren Rahmen bewegen (Drag) bzw. an den Ecken skalieren (Resize). Inspector und Arbeitsfläche bilden ein Zweispalten-Layout mit rechts angedocktem Eigenschaften-Panel.
- **Modulare Element-Hilfen:** Element-Definitionen (Buttons, Defaults, Layout-Standards) liegen zentral in `definitions.ts`; Canvas-Rendering und Inspector greifen auf dieselben Strukturen zu.
- **Container-Layout:** VBox-/HBox-Container verteilen Kinder automatisch (Gap, Padding, Align) und synchronisieren bei manuellen Änderungen oder Größenanpassungen. Neue Kinder können weiterhin über den Inspector schnell hinzugefügt werden.
- **Direkte Bearbeitung & Inspector:** Auf der Arbeitsfläche erscheinen echte UI-Elemente (Labels, Inputs, Dropdowns usw.) und lassen sich dort inhaltlich editieren. Erweiterte Eigenschaften wie Platzhalter, Optionslisten oder Container-Layout werden ausschließlich im Inspector gepflegt.
- **Echte Vorschau:** Label-Elemente passen ihre Schriftgröße automatisch an, einfache Textfelder bestehen nur aus dem Eingabefeld und alle weiteren Controls spiegeln ihr finales Erscheinungsbild ohne zusätzliche Chrome-Elemente wider.
- **Attribute-Popover:** `attribute-popover.ts` verwaltet das Popover (Öffnen, Positionierung, Synchronisation) und hält Inspector sowie Canvas konsistent.
- **Undo/Redo-Historie:** `history.ts` kapselt Snapshot-Verwaltung; `view.ts` nutzt sie für Strg+Z / Strg+Umschalt+Z sowie automatisches Pushen nach Mutationen.
- **Export & Status:** JSON-Export (Canvas + Elemente) sowie Statusleiste werden in `view.ts` gepflegt und auf jede Mutation aktualisiert.
- **Creature-Import:** `creature-import.ts` mountet den Creature-Creator in einer Sandbox, liest Maße/Defaults aus und erzeugt passende LayoutElemente.

## Datenfluss

1. **Interaktion** (Drag, Resize, Inspector, Inline): löst Mutationen an `LayoutElement`-Objekten aus.
2. **`view.ts`** synchronisiert DOM (`syncElementElement`) und ruft `renderInspectorPanel` / `renderElementPreview` auf.
3. **`history.ts`** erstellt Snapshots; Undo/Redo ruft `restoreSnapshot` in der View auf, die wiederum Canvas/Inspector/Export aktualisiert.
4. **Attribute-Popover** sendet Änderungen zurück an `view.ts`, welches Export, Status & Historie aktualisiert.

## Dateibeschreibungen

### `editor/view.ts`
- Implementiert `LayoutEditorView` (`ItemView`).
- Baut Header (Palette, Import, Status), Canvas, Inspector, Exportbereich und Sandbox auf.
- Verwaltet Element-State, Selection, Historie und ruft Hilfs-Module (Preview, Inspector, Popover, Import) orchestriert auf.
- Synchronisiert alle Mutationen (Canvas, Inspector, Export, Status) und sorgt für Bounds-Clamping, Container-Auto-Layout sowie Shortcuts (Delete, Undo/Redo).

### `editor/definitions.ts`
- Enthält Element-Definitionen inkl. Default-Texte, Größen, Layout-Voreinstellungen und Attribute-Gruppen.
- Stellt Label-/Summary-Helfer (`getElementTypeLabel`, `getAttributeSummary`, `getContainerAlignLabel`) bereit.

### `editor/types.ts`
- Typisiert Layout-Elemente, Container-Konfigurationen, Snapshots sowie Inline-Editor-Optionen.
- Wird von allen Teilmodulen genutzt, um konsistente Datenmodelle zu garantieren.

### `editor/history.ts`
- Kapselt Undo/Redo mit Snapshot-Array, Index-Verwaltung und Restore-Callback.
- Bewahrt `isRestoring`-State, damit View-Mutationen keine erneuten History-Einträge erzeugen.

### `editor/inline-edit.ts`
- Bietet einen generischen ContentEditable-Editor (Trim, Multiline, Placeholder) für Preview-Komponenten.

### `editor/element-preview.ts`
- Rendert die Canvas als echte UI-Elemente (Labels, Inputs, Dropdowns etc.) und erlaubt dort nur inhaltliche Direktbearbeitung (z. B. Texte, Default-Werte).
- Übergibt finale Änderungen über Callbacks an die View, damit Inspector, Export und Historie synchron bleiben.

### `editor/inspector-panel.ts`
- Rendert einen kompakten Inspector mit Meta-Infos, Container-Zuordnung, Attribut-Anzeige, Positions-/Größensteuerung, Layout-Parametern und Container-Kindverwaltung.
- Delegiert alle Mutationen (inkl. Platzhalter-, Optionen- und Layout-Änderungen) über `InspectorCallbacks` an die View und öffnet das Attribute-Popover.

### `editor/attribute-popover.ts`
- Erstellt, positioniert und synchronisiert das Attribut-Popover.
- Ruft über Callbacks View-Aktionen (Sync, Export, Inspector, History) auf und kapselt Event-Cleanup.

### `editor/utils.ts`
- Enthält Utility-Funktionen (`clamp`, Deep-Clones, Equality-Checks, Container-Erkennung) für View & History.

### `editor/creature-import.ts`
- Baut den Creature-Creator in einer Sandbox auf, extrahiert Maße/Defaults und erstellt LayoutElemente.
- Aktualisiert Canvas- & Element-State über den bereitgestellten Kontext.
