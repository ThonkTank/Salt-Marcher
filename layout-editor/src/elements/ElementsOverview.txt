# Elements – Overview

## Struktur
```
plugins/layout-editor/src/elements/
├─ ElementsOverview.txt     # Diese Übersicht über Struktur & Vererbung
├─ base.ts                  # Gemeinsame Interfaces für Preview/Inspector-Kontexte
├─ component-manifest.ts    # Auto-generierte Komponentenliste (Build-Artefakt)
├─ ui.ts                    # Elements-UI-Komponenten für Editor- und Modal-Controls
├─ registry.ts              # Registriert Komponenten & liefert Lookup-Helfer
├─ shared/
│  ├─ component-bases.ts    # Abstrakte Basisklassen (Container, Field, TextField, Select)
│  └─ container-preview.ts  # Gemeinsamer Preview-Renderer für Containerlayouts
└─ components/
   ├─ box-container.ts      # Vertikale Container-Komponente mit Standardlayout
   ├─ dropdown.ts           # Einfaches Auswahlfeld (SelectComponent ohne Suche)
   ├─ hbox-container.ts     # Horizontaler Container mit Zentrierung
   ├─ label.ts              # Überschrift mit Inline-Editing & Autoscaling
   ├─ search-dropdown.ts    # Auswahlfeld mit integrierter Suchfunktion
   ├─ separator.ts          # Überschrift + Trennlinie
   ├─ text-input.ts         # Freistehendes einzeiliges Texteingabefeld
   ├─ textarea.ts           # Mehrzeiliges Texteingabefeld mit Placeholder
   ├─ vbox-container.ts     # Vertikaler Container mit Stretch-Align
   └─ view-container.ts     # Spezialfläche für externe Visualisierungen (Feature-Bindings + Kamera-Demo mit Live-Re-Fitting)
```

## Vererbungsstruktur
```
ElementComponentBase
├─ ContainerComponent
├─ FieldComponent
│  ├─ TextFieldComponent
│  │  ├─ text-input
│  │  └─ textarea
│  └─ SelectComponent
│     ├─ dropdown
│     └─ search-dropdown
└─ (spezialisierte Objekte)
   ├─ label (Inline-Editing)
   └─ separator (Divider + Titel)
```

## Features & Verantwortlichkeiten
- **Zentrale Schnittstellen:** `base.ts` definiert, wie Komponenten Preview- und Inspector-Hooks konsumieren.
- **Basisklassen für Felder:** `FieldComponent` bündelt Label/Placeholder-Handling; `TextFieldComponent` kapselt Input-Value-Logik für Text- und Textarea-Komponenten.
- **Optionale Suche in Selects:** `SelectComponent` erweitert `FieldComponent` um Options-Rendering sowie Search-Integration.
- **Container-Verhalten:** `ContainerComponent` stellt Standardlayout, Preview und Inspector-Einträge für Container sicher; `container-preview.ts` zeichnet die Vorschau konsistent.
- **Manifest & Registry:** `component-manifest.ts` und `registry.ts` verbinden sämtliche Komponenten mit Palette und Inspector.
- **UI-Komponenten (`ui.ts`):** Stellt generische Controls für Buttons, Felder, Inputs und Statusanzeigen bereit, die in View, Inspector und Modals verwendet werden.
- **View-Bindings:** `view-container.ts` bringt eine experimentelle View-Fläche inklusive Inspector-Feld für registrierte Features. Die Preview demonstriert Kamerasteuerung (MMB-Pan, Wheel-Zoom), hält die Demo-Oberfläche via `ResizeObserver`/RAF-Fallback lückenlos an die Boxgröße angepasst, setzt `min-width/min-height: 0` auf dem flexiblen Viewport und spiegelt gewählte Bindings wider.

## Datei-Referenz
- **`base.ts`:** Typisiert Preview-/Inspector-Kontexte, Factory-Signaturen und Komponentenschnittstellen.
- **`component-manifest.ts`:** Wird beim Build erstellt und exportiert das Komponenten-Array für die Registry.
- **`registry.ts`:** Baut Lookup-Maps auf, liefert Komponentenlisten und generiert Default-Definitionen.
- **`shared/component-bases.ts`:** Enthält `ElementComponentBase`, `FieldComponent`, `TextFieldComponent`, `ContainerComponent` und `SelectComponent` inklusive gemeinsamer Preview-/Inspector-Implementierungen.
- **`shared/container-preview.ts`:** Rendert die Containerfläche und platziert Kinder-Previews nach Layout.
- **`components/box-container.ts`:** Instanziiert `ContainerComponent` für Box-Layouts mit vertikaler Orientierung.
- **`components/hbox-container.ts`:** Variante des Containers mit horizontaler Ausrichtung und zentrierten Items.
- **`components/vbox-container.ts`:** Vertikale Container-Variante mit Stretch-Alignment und Beschreibung.
- **`components/dropdown.ts`:** Erstellt eine `SelectComponent` ohne Suchfunktion mit Standardoptionen.
- **`components/search-dropdown.ts`:** Aktiviert Suchfunktionalität innerhalb der `SelectComponent`.
- **`components/text-input.ts`:** Nutzt `TextFieldComponent` für ein freies Eingabefeld ohne Inspector-Felder.
- **`components/textarea.ts`:** Konfiguriert `TextFieldComponent` für mehrzeilige Eingaben inkl. Placeholder-Steuerung.
- **`components/label.ts`:** Realisiert Inline-Editing für Überschriften samt dynamischer Schriftgrößenanpassung.
- **`components/separator.ts`:** Rendert optionale Überschrift plus Trennlinie ohne zusätzliche Basisklasse.
- **`components/view-container.ts`:** Koppelt Layout-Elemente an die View-Registry. Inspector bietet eine Feature-Auswahl, Preview stellt eine panning-/zoomfähige Demo-Fläche bereit, richtet diese per `ResizeObserver` (Fallback: RAF-Loop) dauerhaft an die aktuelle Elementgröße aus, bereinigt Observer/RAF bei Re-Renders, setzt via `box-sizing: border-box` und `min-width`/`min-height: 0` auf exakte, frei schrumpfbare Außenmaße und zeigt den gewählten Binding-Namen/ID an.
- **`ui.ts`:** Bündelt allgemeine UI-Bausteine (Buttons, Formularfelder, Selects, Statusanzeigen, Stacks), damit der Editor komplett auf Elements-Komponenten basiert.
