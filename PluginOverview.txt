# SaltMarcher – Overview

## Architektur in Kürze

- **Plugin-Einstieg:** `src/app/main.ts` registriert Views, Commands und Ribbons, lädt CSS sowie Terrain-Palette und räumt beim Unload alles auf.
- **Feature-Schicht:** Unter `src/apps/` liegen die Obsidian-Views. Jeder Feature-Ordner bringt ein eigenes Architektur-Dokument (`*Overview.txt`) mit.
- **Core-Services:** `src/core/` kapselt Hex-Mathematik, Dateiverwaltung und Terrain-Daten als wiederverwendbare Dienste.
- **UI-Bausteine:** `src/ui/` enthält generische Modals/Bestätigungsdialoge, die von mehreren Features genutzt werden.
- **Styling:** `src/app/css.ts` bündelt sämtliches Plugin-CSS in einem Template-String und wird zentral injiziert.

```
src/
├─ app/
│  ├─ main.ts                # Plugin-Bootstrap
│  └─ css.ts                 # Zentrales Styling
│
├─ apps/
│  ├─ map-gallery.ts         # Kartenübersicht (einzelne Datei)
│  ├─ map-editor/            # Hex-Editor – siehe MapEditorOverview.txt
│  ├─ terrain-editor/        # Terrain-Palette – siehe TerrainEditorOverview.txt
│  └─ travel-guide/          # Reiseplanung – siehe TravelGuideOverview.txt
│
├─ core/                     # Hex-Engine, Map/Terrain-Services, Map-Erstellung/-Löschung
└─ ui/                       # Wiederverwendbare Modals & Dialoge
```

---

## Plugin-Lifecycle (`src/app/`)

- **`main.ts`**
  - Registriert die Views `MapEditorView`, `HexGalleryView`, `TerrainEditorView` und `TravelGuideView`.
  - Richtet Commands (`open-map-editor`, `open-terrain-editor`, `open-travel-guide`) sowie passende Ribbon-Icons ein.
  - Lädt Terrain-Daten (`ensureTerrainFile → loadTerrains → setTerrains`) und beobachtet Änderungen via `watchTerrains`.
  - Integriert das zentrale CSS (`injectCss`) und sorgt beim Unload für Cleanup (Watcher, CSS, Event-Refs).
- **`css.ts`** bündelt das Styling für Karten, Editor-UI, Terrain-Editor und Travel-Guide. Renderer setzen Farben inline; CSS kümmert sich um Layout, Hover-Zustände und Animationen.

---

## Feature-Apps (`src/apps/`)

- **Map Gallery (`map-gallery.ts`)**
  - Stellt eine Obsidian-`ItemView` dar, die Karten auflistet, Vorschaurender zeigt und Aktionen wie Öffnen, Löschen oder Erstellen bereitstellt.
  - Nutzt Core-Helfer (`getFirstHexBlock`, `renderHexMap`, `deleteMapAndTiles`) und Modals aus `src/ui/`.

- **Map Editor (`map-editor/`)**
  - Interaktiver Hex-Editor mit Tool-System, Brush-Preview und Tile-Persistenz.
  - Detaillierte Architektur inklusive Tool-APIs, Lifecycle und Modulaufteilung in `src/apps/map-editor/MapEditorOverview.txt`.

- **Terrain Editor (`terrain-editor/`)**
  - Verwaltungsoberfläche für Farben und Reisegeschwindigkeiten der Terrain-Palette.
  - Verantwortlichkeiten, Datenfluss und Store-Logik sind in `src/apps/terrain-editor/TerrainEditorOverview.txt` beschrieben.

- **Travel Guide (`travel-guide/`)**
  - Visualisiert und animiert Reiserouten über Hex-Karten inklusive Token-Playback.
  - Domänenmodell, Rendering-Layer und Persistenzschnittstellen werden in `src/apps/travel-guide/TravelGuideOverview.txt` erläutert.

---

## Core-Services (`src/core/`)

- **Hex Mapper (`hex-mapper/`):** Liefert Geometrie (`hex-geom`), Rendering (`hex-render`), Kamera-Steuerung (`camera`) und Tile-I/O (`hex-notes`). Diese Module kapseln sämtliche low-level Hex-Operationen und SVG-Manipulationen.
- **Map Management:**
  - `map-list.ts` findet Karten-Dateien, extrahiert Hex-Optionen und stellt `MapSelectModal` zur Verfügung.
  - `map-maker.ts` erzeugt neue Karten inkl. initialem Tile-Satz und Dateinamen-Sanitizing.
  - `map-delete.ts` entfernt Karten samt zugehöriger Tiles robust.
- **Layout Utilities (`layout.ts`):** Wählt passende Obsidian-Leaves (z. B. rechter Leaf für Travel Guide) und abstrahiert Workspace-Handling.
- **Terrain-Verwaltung (`terrain.ts`):** Hält globale Farb- und Geschwindigkeits-Maps aktuell (`setTerrains`, `setTerrainPalette`) und stellt Defaults bereit.

---

## Geteilte UI-Bausteine (`src/ui/`)

- **`modals.ts`** bietet `NameInputModal` (neue Karten) und `MapSelectModal` (Kartenwahl) für mehrere Features.
- **`confirm-delete.ts`** stellt einen Sicherheitsdialog zum Löschen von Karten bereit (Name zur Bestätigung, visuelles Warning).

---

## Manifest & Build

- **`manifest.json`** definiert Plugin-ID, Version und Entry (`main.ts`).
- **`main.js` / `esbuild.config.mjs` / `tsconfig.json`** bilden die Build-Pipeline (esbuild) für TypeScript → Obsidian-kompatibles Bundle.
