# SaltMarcher – Plugin Overview

SaltMarcher erweitert Obsidian um Werkzeuge für hex-basierte Kampagnenplanung: Karten lassen sich anlegen, editieren, einfärben,
analysieren und mit Reiserouten versehen. Das Plugin ist in klar getrennte Layer gegliedert, damit Rendering-Logik, Dateisystemzugriffe und UI-Komponenten unabhängig voneinander weiterentwickelt werden können.

## Architektur auf einen Blick

| Layer | Standort | Aufgabe | Detail-Dokument |
| --- | --- | --- | --- |
| Plugin-Bootstrap | `src/app/` | Registriert Views/Commands, lädt CSS & Terrain-Daten und koordiniert Lifecycle sowie Watcher. | – |
| Feature-Apps | `src/apps/` | Enthalten aktive Obsidian-Views (Cartographer mit Travel/Editor/Inspector-Modi) sowie die neue Library für Terrains/Regionen/Kreaturen. | Pro Feature in `*Overview.txt` |
| Core-Services | `src/core/` | Bietet Hex-Geometrie, Map-/Tile-Dateioperationen, Terrain-Verwaltung und Workspace-Helfer. | `src/core/CoreOverview.txt` |
| UI-Bausteine | `src/ui/` | Stellt wiederverwendbare Modals/Bestätigungsdialoge für Features bereit. | `src/ui/UiOverview.txt` |
| Styling | `src/app/css.ts` | Liefert das zentrale CSS, das beim Plugin-Start injiziert wird. | – |

```
src/
├─ app/
│  ├─ main.ts                # Plugin-Bootstrap (Commands, Views, Watcher)
│  └─ css.ts                 # Zentrales Styling (wird dynamisch injiziert)
│
├─ apps/
│  ├─ cartographer/          # Multi-Mode Map Viewer (Travel/Editor/Inspector) – CartographerOverview.txt
│  ├─ terrain-editor/        # Terrain-Palette – TerrainEditorOverview.txt
│  └─ legacy/                # Kompatibilitäts-Wrapper (Map Editor, Gallery, Travel Guide)
│
├─ core/                     # Hex-Engine & Dateiservices – CoreOverview.txt
└─ ui/                       # Modals & Dialoge – UiOverview.txt
```

## Layer-Highlights

### Plugin-Lifecycle (`src/app/`)
- `main.ts` registriert nur noch den Cartographer und den Terrain Editor als aktive Views; Legacy-Views bleiben im Code, werden aber nicht mehr automatisch angehängt.
- Cartographer-Ribbons/Commands nutzen `getCenterLeaf`, um stets den mittleren Workspace-Leaf zu fokussieren, während der Terrain Editor weiterhin in einem neuen Leaf öffnet.
- Lädt Terrain-Definitionen über den Core-Service (`core/terrain-store.ts`: `ensureTerrainFile → loadTerrains → setTerrains`) und beobachtet Änderungen via `watchTerrains`.
- Injiziert das zentrale CSS (`injectCss`) und räumt beim Unload alle Listener/Watcher ab.
- Verteilt Events/Handler an Feature-Layer und Core-Services.

### Feature-Apps (`src/apps/`)
- **Cartographer (`cartographer/`):** Stellt den `sm-cartographer`-Shell bereit, rendert Karten via `renderHexMap`/`createMapLayer`, schaltet Travel/Editor/Inspector-Modi über ein Dropdown im Header, kapselt deren Sidebars und bündelt Open/Create/Delete über `createMapManager`.
- **Library (`library/`):** Vereinheitlichte Bibliothek für Terrains, Regionen und Kreaturen. Bietet Modus-Tabs, gemeinsame Such-/Erstellen-Leiste und Ergebnisliste sowie Inline-Bearbeitung für Terrains/Regionen. Terrains/Regionen bearbeiten Sammeldateien (`SaltMarcher/Terrains.md`, `SaltMarcher/Regions.md`), Kreaturen nutzen per‑Datei‑Speicherung unter `SaltMarcher/Creatures/`.
- **Legacy-Hüllen (`legacy/`):** Bewahrt frühere Views (Map Editor, Map Gallery, Travel Guide) als Kompatibilitäts-Schicht. Details siehe `src/apps/legacy/LegacyAppsOverview.txt`.

### Core-Services (`src/core/`)
- Bündelt Hex-Mathematik, SVG-Rendering, Map/Terrain-Dateiverwaltung und Workspace-Utilities.
- High-Level-Flows für Kartenanlage (`createHexMapFile`), Tile-Liste/Selektion (`getAllMapFiles`, `getFirstHexBlock`), Rendering (`renderHexMap`) und Löschung (`deleteMapAndTiles`).
- Terrain-Verwaltung (`terrain-store.ts`, `setTerrainPalette`, `setTerrains`) hält UI und Renderer konsistent.
- Ausführliche Beschreibung im [Core Overview](src/core/CoreOverview.txt).

### Geteilte UI-Bausteine (`src/ui/`)
- `NameInputModal`, `MapSelectModal`, `ConfirmDeleteModal` und `map-workflows.ts` kapseln wiederverwendbare Dialoge und Map-spezifische Workflows (Button-Styling, Open/Create/Render).
- Reduzieren Boilerplate in Feature-Apps und sorgen für einheitliche UX zwischen Galerie und Editor.
- Details im [UI Overview](src/ui/UiOverview.txt).

### Styling & Build
- `src/app/css.ts` liefert den konsolidierten `sm-cartographer`-Look (Stage, Header, Mode-Sidebars) sowie Travel-spezifische Controls. Galerie-Styles wurden entfernt; Modals oder optionale Komponenten bringen eigene CSS-Blöcke mit.
- `manifest.json` definiert Plugin-ID/Version, `esbuild.config.mjs` + `tsconfig.json` stellen die Build-Pipeline für TypeScript sicher (`npm run build`).

## Typische Nutzerflüsse
1. Anwender erstellt über Ribbon/Command eine neue Karte → `promptCreateMap` sammelt den Namen (intern `NameInputModal` + `createHexMapFile`), legt Map + Tiles an und öffnet den Editor.
2. Im Cartographer-Header lassen sich Karten via `promptMapSelection` öffnen, neu erstellen oder löschen (`ConfirmDeleteModal` + `deleteMapAndTiles`); die Stage zeigt sofort eine Vorschau oder Leerhinweise, falls keine Karte gewählt ist.
3. Terrain-Anpassungen werden im Terrain-Editor vorgenommen, der via Core `setTerrains` aktualisiert und sofort im Renderer wirksam macht.
4. Travel-Routen greifen auf dieselben Hex-Geometrie- und Rendering-Bausteine zurück, um Bewegungen über Karten abzubilden.

Dieses Dokument bietet den High-Level-Einstieg. Für Details zu einzelnen Layern verweisen die verlinkten Overview-Dateien auf Verantwortlichkeiten, APIs und Erweiterungspunkte.
